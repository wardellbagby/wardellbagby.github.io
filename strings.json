{
  "header_title": "Wardell Bagby",
  "header_subtitle": "The second most famous Wardell you know!",
  "unknown_blurb": "Hey there! You've ended up somewhere I never intended for you to reach, so here's a cute picture as a reward.",
  "unknown_load_failure": "Wow, you double-lucked out. I also failed to load the picture.",
  "home_blurb": [
    "Hey! I'm Wardell Bagby; an Android developer who also dabbles in JS for fun. I know that's a twisted idea of fun but I digress.",
    "I'm also super into open source, St. Louis style pizza, and reassembling things with less screws than they started with."
  ],
  "lyricistant_short_desc": "A helpful writing assistant for lyricists!",
  "lyricistant_long_desc": [
    "Lyricistant is a writing app geared toward helping you write lyrics, poetry, or anything else you desire!",
    "Unlike other apps with a focus on rhyming, Lyricistant is first and foremost a writing app. It's made for you to use to write your lyrics, while offering helpful features to keep you in the writing zone.",
    "This is where I spend most of my free time; thinking of cool new features for this. It's my little baby monorepo. Can you believe an Android, iOS, Web, and Electron app all build out of this one codebase?! That's a difficult problem to solve for one person from scratch!",
    "Probably the most fun thing about developing it is working on getting all of the various platforms to play together nicely with abstractions that make sense but are also easily extensible. This is made even more difficult when you consider the huge differences between Web, Electron, Android, and iOS but I've (mostly) successfully been able to abstract away platform-specific complexities and keep a fairly large set of core code that just \"works\".",
    "The biggest downside is that the codebase is unlike most JS codebases so it requires an hour long lecture before you can contribute to it, but slowly and surely, more documentation is being written to help alleviate that for whenever I get my first random contributor to it.",
    "Maybe that'll be you!"
  ],
  "sea_short_desc": "An excuse to use cool stuff together in a not cool project.",
  "sea_long_desc": [
    "Back in the throes of 2020, I decided I wanted to see what it would look like if I combined Square's Workflow library, Square's Anvil library, and Jetpack Compose all together in one brand new app. This was the result of that endeavor.",
    "Try not to fault me too hard for its relative simplicity and not totally adhering to the standards of the time; think of it more as a casual weekend project that I will probably never update, because that's what it is."
  ],
  "wardellbagby_short_desc": "The website you're viewing right now, written in Jetpack Compose for Web!",
  "wardellbagby_long_desc": [
    "Mostly an excuse to use Jetpack Compose for Web. I've written quite a lot of React in the last few years, and even more Kotlin, so the idea of writing a website using effectively both of those skills combined seemed like a dream come true.",
    "That being said, I personally feel that Kotlin/JS is a poor substitute for Typescript as Kotlin's type system isn't verbose enough to truly express all of the weirdness that exists in the Javascript ecosystem. Plus, the fact that you have to use Gradle to use Kotlin/JS is a bit of a turn off.",
    "As far as the website itself, I've got to say it was pretty pleasant to have the power of the Kotlin stdlib when writing it. Jetpack Compose is still wonderful, even with the limitations of Kotlin/JS.",
    "Maybe I'll port this to Workflows/JS whenever that happens."
  ],
  "projects": "My various projects",
  "website": "Website",
  "home": "Home",
  "repo": "Repository",
  "take_me_home": "Take me home!",
  "workflow_gen_short_desc": "A library that lets to write your GitHub Workflows in JavaScript or Typescript.",
  "workflow_gen_long_desc": [
    "Also known as \"gh-workflow-gen\", this is a library I wrote in order to consolidate the complex Workflow steps used in Lyricistant.",
    "Since Lyricistant builds for multiple platforms, you can imagine that it has a lot of shared build logic steps. GitHub Workflows, at the time I wrote this library, didn't support any sort of sharing of build steps unless you copy-pasted it all over your multiple Workflow files. By creating those same Workflow files via templates created in JS, we can much more easily share those steps.",
    "There's also a nice little feature that came from writing this library in Typescript; hard-typing for dependencies! This allows you to force that all of your external actions are of the same version."
  ],
  "rxcdt_short_desc": "An Kotlin Android library that wraps the CountDownTimer so it can be used with RxJava.",
  "rxcdt_long_desc": [
    "A CountDownTimer is a class that exists in the Android libs that will, given an amount of time in the future, will regularly post the amount of time left until the moment of time in the future has come to pass.",
    "This mostly only exists because way back in 2018, a literal lifetime in Android-land (e.g., when RxJava was still cool and no one cared about Flow), I wanted to use CountDownTimer but with RxJava. I knew at the time that I could easily recreate CountDownTimer with pure RxJava, but for reasons I can't remember, I chose to make this library instead.",
    "To note: this was before I realized how great the Square Kotlin codestyle is, so it's formatted very weirdly."
  ],
  "latest_blog_post": "Latest blog post",
  "blog": "Blog",
  "sensor_disabler_short_desc": "An Android app that remove or mocks the values of sensors on your device.",
  "sensor_disabler_long_desc": [
    "A long long time ago, when Eclipse had an ADT plugin and Ant wasn't just the wrong pronunciation of Aunt, I was a kid in college. I had a friend who had recently gotten their Nexus 4's screen replaced, but the replaced screen covered the proximity sensor, meaning their screen would immediately turn off whenever they started a phone call.",
    "Frustrating, I know.",
    "At the time, I was super into this framework called \"Xposed\", which let you modify any function that was called on your device. Including ones provided by the Android OS... I ended up making an app using that framework to disable their proximity sensor.",
    "Some time after, I thought \"Hey, I could expand this out to disable any sensor!\" And so I did. Enter Sensor Disabler.",
    "This app is OLD, but I recently updated it to use all the latest and greatest Android libraries. It's got some Compose, some Flow, some Workflows, some Hilt, and a little bit of View Models. It's also still got some Java kicking around, too. Not to mention the best part: the code that actually hooks into the Android OS to make it all work!",
    "Reflection might be bad, but it's still so fun to do."
  ]
}